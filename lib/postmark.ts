import { ServerClient } from 'postmark';
import { env } from '@/lib/env';
import { Log } from '@/server/db';

export const postmark = new ServerClient(
  env.POSTMARK_API_TOKEN || 'dummy-token'
);

export interface EmailAttachment {
  name: string;
  content: string; // Base64 encoded content
  contentType: string;
}

export const sendEmail = async (params: {
  to: string;
  subject: string;
  htmlBody: string;
  textBody?: string;
  attachments?: EmailAttachment[];
}) => {
  if (!env.POSTMARK_API_TOKEN) {
    console.log('Postmark not configured, skipping email send');
    return { MessageID: 'mock-message-id', ErrorCode: 0 };
  }

  // Use a verified domain for Postmark
  // Update this to match your verified domain in Postmark
  const fromAddress = 'bruno@tanklog.co';

  try {
    console.log('Sending email via Postmark:', {
      from: fromAddress,
      to: params.to,
      subject: params.subject,
      hasAttachments: !!params.attachments?.length
    });

    const response = await postmark.sendEmail({
      From: fromAddress,
      To: params.to,
      Subject: params.subject,
      HtmlBody: params.htmlBody,
      TextBody: params.textBody,
      Attachments: params.attachments?.map((att) => ({
        Name: att.name,
        Content: att.content,
        ContentType: att.contentType,
        ContentID: null,
      })),
    });

    console.log('Email sent successfully:', response);
    return response;
  } catch (error) {
    console.error('Failed to send email:', error);

    // If domain restriction error, log it and return a mock response
    if (
      error &&
      typeof error === 'object' &&
      'code' in error &&
      error.code === 412
    ) {
      console.log(
        'Postmark account pending approval - email would be sent to:',
        params.to
      );
      console.log(
        'Domain restriction: From address must match recipient domain'
      );
      return { MessageID: 'mock-message-id', ErrorCode: 0 };
    }

    throw error;
  }
};

export const sendTemplateEmail = async (params: {
  to: string;
  templateId: number;
  templateModel: Record<string, unknown>;
}) => {
  if (!env.POSTMARK_API_TOKEN) {
    console.log('Postmark not configured, skipping template email send');
    return { MessageID: 'mock-message-id', ErrorCode: 0 };
  }

  const response = await postmark.sendEmailWithTemplate({
    From: 'noreply@tanklog.app',
    To: params.to,
    TemplateId: params.templateId,
    TemplateModel: params.templateModel,
  });

  return response;
};

/**
 * Send log PDF via email
 */
export const sendLogPdfEmail = async (
  to: string,
  logData: Log,
  pdfBuffer: Buffer,
  pdfFilename: string
) => {
  const subject = `TankLog Report - ${logData.site || logData.tank_id} - ${new Date(logData.occurred_at).toLocaleDateString()}`;

  const htmlBody = `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
      <h2 style="color: #2563eb;">TankLog Report</h2>
      
      <p>Hello,</p>
      
      <p>Your TankLog report has been generated and is attached below:</p>
      
      <ul>
        <li><strong>Site:</strong> ${logData.site}</li>
        <li><strong>Tank ID:</strong> ${logData.tank_id}</li>
        <li><strong>Date:</strong> ${new Date(logData.occurred_at).toLocaleDateString()}</li>
        <li><strong>Leak Check:</strong> ${logData.leak_check ? 'Pass' : 'Fail'}</li>
        ${logData.visual_ok !== null ? `<li><strong>Visual Inspection:</strong> ${logData.visual_ok ? 'All OK' : 'Issues Found'}</li>` : ''}
      </ul>
      
      ${logData.notes ? `<p><strong>Notes:</strong> ${logData.notes}</p>` : ''}
      
      <p>This report has been automatically generated by TankLog and saved to your account.</p>
      
      <hr style="margin: 20px 0; border: none; border-top: 1px solid #e5e7eb;">
      
      <p style="font-size: 12px; color: #6b7280;">
        Generated by TankLog • ${new Date().toISOString()}
      </p>
    </div>
  `;

  const textBody = `
TankLog Report

Site: ${logData.site}
Tank ID: ${logData.tank_id}
Date: ${new Date(logData.occurred_at).toLocaleDateString()}
Leak Check: ${logData.leak_check ? 'Pass' : 'Fail'}
${logData.visual_ok !== null ? `Visual Inspection: ${logData.visual_ok ? 'All OK' : 'Issues Found'}` : ''}

${logData.notes ? `Notes: ${logData.notes}` : ''}

This report has been generated by TankLog and is attached to this email.

Generated by TankLog • ${new Date().toISOString()}
  `;

  // Convert PDF to base64 (pdfBuffer is Uint8Array from Puppeteer)
  const base64Content = Buffer.from(pdfBuffer).toString('base64');
  // Validate base64 content
  const base64Regex = /^[A-Za-z0-9+/]*={0,2}$/;
  if (!base64Regex.test(base64Content)) {
    throw new Error('Invalid base64 content generated');
  }

  return sendEmail({
    to,
    subject,
    htmlBody,
    textBody,
    attachments: [
      {
        name: pdfFilename,
        content: base64Content,
        contentType: 'application/pdf',
      },
    ],
  });
};

/**
 * Send welcome email to new users
 */
export const sendWelcomeEmail = async (
  to: string,
  userName: string,
  orgName: string
) => {
  const subject = `Welcome to TankLog - ${orgName}`;

  const htmlBody = `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
      <h2 style="color: #2563eb;">Welcome to TankLog!</h2>
      
      <p>Hello ${userName},</p>
      
      <p>Welcome to TankLog! You've been added to the <strong>${orgName}</strong> organization.</p>
      
      <p>You can now:</p>
      <ul>
        <li>Create new tank logs</li>
        <li>View existing logs</li>
        <li>Generate PDF reports</li>
        <li>Manage compliance settings</li>
      </ul>
      
      <p>Get started by visiting your dashboard at <a href="${env.APP_URL}">${env.APP_URL}</a></p>
      
      <hr style="margin: 20px 0; border: none; border-top: 1px solid #e5e7eb;">
      
      <p style="font-size: 12px; color: #6b7280;">
        TankLog • Digital Tank Inspection Management
      </p>
    </div>
  `;

  const textBody = `
Welcome to TankLog!

Hello ${userName},

Welcome to TankLog! You've been added to the ${orgName} organization.

You can now:
- Create new tank logs
- View existing logs  
- Generate PDF reports
- Manage compliance settings

Get started by visiting your dashboard at ${env.APP_URL}

TankLog • Digital Tank Inspection Management
  `;

  return sendEmail({
    to,
    subject,
    htmlBody,
    textBody,
  });
};
