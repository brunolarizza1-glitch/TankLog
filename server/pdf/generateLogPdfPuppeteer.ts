import { createAdminClient } from '@/lib/supabase/server';
import { db } from '@/server/db';

interface PdfResult {
  pdfUrl: string;
  storagePath: string;
  filename: string;
}

async function loadLogPdfData(logId: string) {
  const log = await db.getLog(logId);
  if (!log) {
    throw new Error('Log not found');
  }

  const organization = await db.getOrganization(log.org_id);
  if (!organization) {
    throw new Error('Organization not found');
  }

  const profile = await db.getProfile(log.user_id);
  if (!profile) {
    throw new Error('Profile not found');
  }

  return { log, organization, profile };
}

function generateFilename(pdfData: any) {
  const date = new Date(pdfData.log.occurred_at);
  const dateStr = date.toISOString().split('T')[0];
  const tankId = pdfData.log.tank_id.replace(/[^a-zA-Z0-9]/g, '-');
  return `tanklog-report-${tankId}-${dateStr}.pdf`;
}

async function generateSignedUrl(storagePath: string) {
  const supabase = createAdminClient();
  const { data } = await supabase.storage
    .from('log-pdfs')
    .createSignedUrl(storagePath, 60 * 60 * 24 * 7); // 7 days

  if (!data?.signedUrl) {
    throw new Error('Failed to generate signed URL');
  }

  return data.signedUrl;
}

export async function generateLogPdfPuppeteer(
  logId: string
): Promise<PdfResult> {
  console.log('generateLogPdfPuppeteer called for logId:', logId);
  try {
    const pdfData = await loadLogPdfData(logId);
    const filename = generateFilename(pdfData);

    // For now, skip PDF generation and just send email with log data
    console.log('Skipping PDF generation for now, sending email with log data');
    
    // Send email without PDF attachment
    if (pdfData.profile.email) {
      try {
        console.log('Sending email to log creator:', pdfData.profile.email);
        
        const { sendEmail } = await import('@/lib/postmark');
        
        await sendEmail({
          to: pdfData.profile.email,
          subject: `TankLog Report - ${pdfData.log.site || pdfData.log.tank_id} - ${new Date(pdfData.log.occurred_at).toLocaleDateString()}`,
          htmlBody: `
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
              <h2 style="color: #2563eb;">TankLog Report</h2>
              
              <p>Hello,</p>
              
              <p>Your TankLog report has been generated:</p>
              
              <ul>
                <li><strong>Site:</strong> ${pdfData.log.site || 'N/A'}</li>
                <li><strong>Tank ID:</strong> ${pdfData.log.tank_id}</li>
                <li><strong>Date:</strong> ${new Date(pdfData.log.occurred_at).toLocaleDateString()}</li>
                <li><strong>Leak Check:</strong> ${pdfData.log.leak_check ? 'Pass' : 'Fail'}</li>
                ${pdfData.log.visual_ok !== null ? `<li><strong>Visual Inspection:</strong> ${pdfData.log.visual_ok ? 'All OK' : 'Issues Found'}</li>` : ''}
              </ul>
              
              ${pdfData.log.notes ? `<p><strong>Notes:</strong> ${pdfData.log.notes}</p>` : ''}
              
              <p>This report has been automatically generated by TankLog and saved to your account.</p>
              
              <hr style="margin: 20px 0; border: none; border-top: 1px solid #e5e7eb;">
              
              <p style="font-size: 12px; color: #6b7280;">
                Generated by TankLog • ${new Date().toISOString()}
              </p>
            </div>
          `,
          textBody: `
            TankLog Report
            
            Site: ${pdfData.log.site || 'N/A'}
            Tank ID: ${pdfData.log.tank_id}
            Date: ${new Date(pdfData.log.occurred_at).toLocaleDateString()}
            Leak Check: ${pdfData.log.leak_check ? 'Pass' : 'Fail'}
            ${pdfData.log.visual_ok !== null ? `Visual Inspection: ${pdfData.log.visual_ok ? 'All OK' : 'Issues Found'}` : ''}
            
            ${pdfData.log.notes ? `Notes: ${pdfData.log.notes}` : ''}
            
            This report has been automatically generated by TankLog and saved to your account.
            
            Generated by TankLog • ${new Date().toISOString()}
          `,
        });

        console.log('Email sent successfully without PDF');
      } catch (emailError) {
        console.error('Failed to send email:', emailError);
      }
    }

    // Return a mock PDF result for now
    return {
      pdfUrl: 'https://tanklog.co/logs', // Fallback URL
      storagePath: 'mock-pdf-path',
      filename: `tanklog-report-${pdfData.log.tank_id}-${new Date().toISOString().split('T')[0]}.pdf`,
    };
  } catch (error) {
    console.error('Error in generateLogPdfPuppeteer:', error);
    throw error;
  }
}